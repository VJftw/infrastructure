
def rego_bundle(
    name: str,
    root: str,
    srcs: list,
    visibility: list = [],
    deps: list = [],
):
    return genrule(
        name = name,
        outs = [name],
        srcs = srcs,
        cmd = f"""
mkdir -p $OUTS
for src in $SRCS; do
    sha256sum "$src" >> .sha256sums
    cp "$src" "$OUTS/"
done

revision=$(sha256sum .sha256sums | cut -f1 -d" ")

cat << EOF > $OUTS/.manifest
{{
  "revision": "$revision",
  "roots": ["{root}"]
}}
EOF
        """,
        visibility = visibility,
        labels = ["rego"],
        exported_deps = deps,
    )


def rego_test(
    name: str,
    srcs: list,
    deps: list = [],
):
    bundles="\\\\\n".join([f"--bundle ./$(location {b})" for b in deps])
    return gentest(
        name = name,
        data = srcs + deps,
        test_tools = "//third_party/binary:opa",
        test_cmd = f"""
set -Euo pipefail
test_dir=$(find . -name '*_test.rego' -type f | head -n1 | xargs dirname)
test_dir_basename=$(basename $test_dir)
bundle_dir=$test_dir/$test_dir_basename
find . -name '*_test.rego' -type f -exec mv -t $bundle_dir {{}} +

$TOOLS test \\
    --verbose \\
    {bundles} \\
    $bundle_dir > opa.results

# translate to Go Test format as per (https://please.build/tests.html)
while read p; do
    if [[ $p == data* ]]; then
        test_name=$(echo "$p" | cut -f1 -d:)
        test_result=$(echo "$p" | cut -f2 -d" ")
        test_duration_microseconds=$(echo "$p" | cut -f2 -d\( | cut -f1 -d\) | sed 's/Âµs//g')
        test_duration_seconds=$(printf %.2f $(echo "$test_duration_microseconds / 1000000" | bc -l))
        echo  "=== RUN   $test_name" >> test.results
        echo  "--- ${{test_result}}: $test_name (${{test_duration_seconds}}s)" >> test.results
    fi
done <opa.results
cat opa.results
        """,
        labels = ["rego"],
    )

def opa_eval(
    name: str,
    bundles: list,
    query: str = "",
    visibility: list = [],
):
    bundle_flags=" \\\\\n".join([f"--bundle $(out_location {b})" for b in bundles])

    return sh_cmd(
        name = name,
        data = bundles + ["//third_party/binary:opa"],
        shell = "/usr/bin/env bash",
        cmd = f"""
set -Eeuo pipefail
$(out_location //third_party/binary:opa) \\\\
    eval \\\\
    --fail-defined \\\\
    --format pretty \\\\
    {bundle_flags} \\\\
    '{query}' \\\\
    "\\\$@"
        """,
        visibility = visibility,
    )
