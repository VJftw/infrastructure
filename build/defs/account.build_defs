subinclude("///shell//build_defs:shell")

def account(
        tfvars_file:str,
        default_role:str="administrator"):
    name = basename(tfvars_file).split(".")[0]

    # _tfvars
    tfvars = export_file(
        name = f"{name}_tfvars",
        src = tfvars_file,
        visibility = ["PUBLIC"],
    )

    # _auth
    sh_cmd(
        name = f"{name}_auth",
        cmd = f"""
set -Eeuo pipefail
$(out_location //build/defs/account:auth_tool) \\\\
    --account_tfvars="$(out_location {tfvars})" \\\\
    --default_role="{default_role}" \\\\
    "\\\$@"
        """,
        shell = "/usr/bin/env bash",
        data = ["//build/defs/account:auth_tool", tfvars],
        visibility = ["PUBLIC"],
    )

def provider(
        name:str):
    fg = filegroup(
        name = name,
        srcs = glob(["**.tfvars"]),
        visibility = ["PUBLIC"],
    )

    for f in glob(["**.tfvars"]):
        account(f)

    genrule(
        name = "starlark",
        srcs = [fg],
        outs = ["accounts.starlark"],
        cmd = """
    set -Eeuox pipefail
    files=($(find accounts/ -type f -name '*.tfvars'))
    echo '[]' > $OUTS

    for f in "${files[@]}"; do

        $TOOLS \\
            --arg name "$(cat $f | grep 'name' | cut -f2 -d\\")" \\
            --arg environment "$(cat $f | grep 'environment' | cut -f2 -d\\")" \\
            '. += [{ "name": $name, "environment": $environment }]' \\
            $OUTS > ${OUTS}.new
        mv ${OUTS}.new $OUTS

    done

    sed -i '1s/^/accounts = /' $OUTS
        """,
        tools = ["//third_party/binary:jq"],
        visibility = ["PUBLIC"],
    )
